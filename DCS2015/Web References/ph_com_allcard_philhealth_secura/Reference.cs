//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace DCS2015.ph_com_allcard_philhealth_secura {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AllcardSoap", Namespace="http://tempuri.org/")]
    public partial class Allcard : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SelectCompanyForDataCapturingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SP100OperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRecordIfExistingByPhilhealthNoAndNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRecordIfExisting_PhilhealthNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRecordIfExisting_FirstMiddleLastOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Allcard() {
            this.Url = global::DCS2015.Properties.Settings.Default.DCS2015_ph_com_allcard_philhealth_secura_Allcard;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SelectCompanyForDataCapturingCompletedEventHandler SelectCompanyForDataCapturingCompleted;
        
        /// <remarks/>
        public event SP100CompletedEventHandler SP100Completed;
        
        /// <remarks/>
        public event CheckRecordIfExistingByPhilhealthNoAndNameCompletedEventHandler CheckRecordIfExistingByPhilhealthNoAndNameCompleted;
        
        /// <remarks/>
        public event CheckRecordIfExisting_PhilhealthNoCompletedEventHandler CheckRecordIfExisting_PhilhealthNoCompleted;
        
        /// <remarks/>
        public event CheckRecordIfExisting_FirstMiddleLastCompletedEventHandler CheckRecordIfExisting_FirstMiddleLastCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectCompanyForDataCapturing", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SelectCompanyForDataCapturing(string _keyValue, string strDates, ref System.Data.DataTable dt, ref string ErrorMessage) {
            object[] results = this.Invoke("SelectCompanyForDataCapturing", new object[] {
                        _keyValue,
                        strDates,
                        dt,
                        ErrorMessage});
            dt = ((System.Data.DataTable)(results[1]));
            ErrorMessage = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SelectCompanyForDataCapturingAsync(string _keyValue, string strDates, System.Data.DataTable dt, string ErrorMessage) {
            this.SelectCompanyForDataCapturingAsync(_keyValue, strDates, dt, ErrorMessage, null);
        }
        
        /// <remarks/>
        public void SelectCompanyForDataCapturingAsync(string _keyValue, string strDates, System.Data.DataTable dt, string ErrorMessage, object userState) {
            if ((this.SelectCompanyForDataCapturingOperationCompleted == null)) {
                this.SelectCompanyForDataCapturingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectCompanyForDataCapturingOperationCompleted);
            }
            this.InvokeAsync("SelectCompanyForDataCapturing", new object[] {
                        _keyValue,
                        strDates,
                        dt,
                        ErrorMessage}, this.SelectCompanyForDataCapturingOperationCompleted, userState);
        }
        
        private void OnSelectCompanyForDataCapturingOperationCompleted(object arg) {
            if ((this.SelectCompanyForDataCapturingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectCompanyForDataCapturingCompleted(this, new SelectCompanyForDataCapturingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SP100", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SP100(string _keyValue, string _Data, ref System.Data.DataTable dt, ref string ErrorMessage) {
            object[] results = this.Invoke("SP100", new object[] {
                        _keyValue,
                        _Data,
                        dt,
                        ErrorMessage});
            dt = ((System.Data.DataTable)(results[1]));
            ErrorMessage = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SP100Async(string _keyValue, string _Data, System.Data.DataTable dt, string ErrorMessage) {
            this.SP100Async(_keyValue, _Data, dt, ErrorMessage, null);
        }
        
        /// <remarks/>
        public void SP100Async(string _keyValue, string _Data, System.Data.DataTable dt, string ErrorMessage, object userState) {
            if ((this.SP100OperationCompleted == null)) {
                this.SP100OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSP100OperationCompleted);
            }
            this.InvokeAsync("SP100", new object[] {
                        _keyValue,
                        _Data,
                        dt,
                        ErrorMessage}, this.SP100OperationCompleted, userState);
        }
        
        private void OnSP100OperationCompleted(object arg) {
            if ((this.SP100Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SP100Completed(this, new SP100CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRecordIfExistingByPhilhealthNoAndName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckRecordIfExistingByPhilhealthNoAndName(string _keyValue, string strPhilhealthNo, string strFName, string strMName, string strLName, ref string Response, ref string ErrorMessage) {
            object[] results = this.Invoke("CheckRecordIfExistingByPhilhealthNoAndName", new object[] {
                        _keyValue,
                        strPhilhealthNo,
                        strFName,
                        strMName,
                        strLName,
                        Response,
                        ErrorMessage});
            Response = ((string)(results[1]));
            ErrorMessage = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRecordIfExistingByPhilhealthNoAndNameAsync(string _keyValue, string strPhilhealthNo, string strFName, string strMName, string strLName, string Response, string ErrorMessage) {
            this.CheckRecordIfExistingByPhilhealthNoAndNameAsync(_keyValue, strPhilhealthNo, strFName, strMName, strLName, Response, ErrorMessage, null);
        }
        
        /// <remarks/>
        public void CheckRecordIfExistingByPhilhealthNoAndNameAsync(string _keyValue, string strPhilhealthNo, string strFName, string strMName, string strLName, string Response, string ErrorMessage, object userState) {
            if ((this.CheckRecordIfExistingByPhilhealthNoAndNameOperationCompleted == null)) {
                this.CheckRecordIfExistingByPhilhealthNoAndNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRecordIfExistingByPhilhealthNoAndNameOperationCompleted);
            }
            this.InvokeAsync("CheckRecordIfExistingByPhilhealthNoAndName", new object[] {
                        _keyValue,
                        strPhilhealthNo,
                        strFName,
                        strMName,
                        strLName,
                        Response,
                        ErrorMessage}, this.CheckRecordIfExistingByPhilhealthNoAndNameOperationCompleted, userState);
        }
        
        private void OnCheckRecordIfExistingByPhilhealthNoAndNameOperationCompleted(object arg) {
            if ((this.CheckRecordIfExistingByPhilhealthNoAndNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRecordIfExistingByPhilhealthNoAndNameCompleted(this, new CheckRecordIfExistingByPhilhealthNoAndNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRecordIfExisting_PhilhealthNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckRecordIfExisting_PhilhealthNo(string _keyValue, string strPhilhealthNo, ref int Result, ref string ErrorMessage) {
            object[] results = this.Invoke("CheckRecordIfExisting_PhilhealthNo", new object[] {
                        _keyValue,
                        strPhilhealthNo,
                        Result,
                        ErrorMessage});
            Result = ((int)(results[1]));
            ErrorMessage = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRecordIfExisting_PhilhealthNoAsync(string _keyValue, string strPhilhealthNo, int Result, string ErrorMessage) {
            this.CheckRecordIfExisting_PhilhealthNoAsync(_keyValue, strPhilhealthNo, Result, ErrorMessage, null);
        }
        
        /// <remarks/>
        public void CheckRecordIfExisting_PhilhealthNoAsync(string _keyValue, string strPhilhealthNo, int Result, string ErrorMessage, object userState) {
            if ((this.CheckRecordIfExisting_PhilhealthNoOperationCompleted == null)) {
                this.CheckRecordIfExisting_PhilhealthNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRecordIfExisting_PhilhealthNoOperationCompleted);
            }
            this.InvokeAsync("CheckRecordIfExisting_PhilhealthNo", new object[] {
                        _keyValue,
                        strPhilhealthNo,
                        Result,
                        ErrorMessage}, this.CheckRecordIfExisting_PhilhealthNoOperationCompleted, userState);
        }
        
        private void OnCheckRecordIfExisting_PhilhealthNoOperationCompleted(object arg) {
            if ((this.CheckRecordIfExisting_PhilhealthNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRecordIfExisting_PhilhealthNoCompleted(this, new CheckRecordIfExisting_PhilhealthNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRecordIfExisting_FirstMiddleLast", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckRecordIfExisting_FirstMiddleLast(string _keyValue, string strFName, string strMName, string strLName, ref int Result, ref string ErrorMessage) {
            object[] results = this.Invoke("CheckRecordIfExisting_FirstMiddleLast", new object[] {
                        _keyValue,
                        strFName,
                        strMName,
                        strLName,
                        Result,
                        ErrorMessage});
            Result = ((int)(results[1]));
            ErrorMessage = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRecordIfExisting_FirstMiddleLastAsync(string _keyValue, string strFName, string strMName, string strLName, int Result, string ErrorMessage) {
            this.CheckRecordIfExisting_FirstMiddleLastAsync(_keyValue, strFName, strMName, strLName, Result, ErrorMessage, null);
        }
        
        /// <remarks/>
        public void CheckRecordIfExisting_FirstMiddleLastAsync(string _keyValue, string strFName, string strMName, string strLName, int Result, string ErrorMessage, object userState) {
            if ((this.CheckRecordIfExisting_FirstMiddleLastOperationCompleted == null)) {
                this.CheckRecordIfExisting_FirstMiddleLastOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRecordIfExisting_FirstMiddleLastOperationCompleted);
            }
            this.InvokeAsync("CheckRecordIfExisting_FirstMiddleLast", new object[] {
                        _keyValue,
                        strFName,
                        strMName,
                        strLName,
                        Result,
                        ErrorMessage}, this.CheckRecordIfExisting_FirstMiddleLastOperationCompleted, userState);
        }
        
        private void OnCheckRecordIfExisting_FirstMiddleLastOperationCompleted(object arg) {
            if ((this.CheckRecordIfExisting_FirstMiddleLastCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRecordIfExisting_FirstMiddleLastCompleted(this, new CheckRecordIfExisting_FirstMiddleLastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SelectCompanyForDataCapturingCompletedEventHandler(object sender, SelectCompanyForDataCapturingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectCompanyForDataCapturingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectCompanyForDataCapturingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable dt {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SP100CompletedEventHandler(object sender, SP100CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SP100CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SP100CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable dt {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckRecordIfExistingByPhilhealthNoAndNameCompletedEventHandler(object sender, CheckRecordIfExistingByPhilhealthNoAndNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRecordIfExistingByPhilhealthNoAndNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRecordIfExistingByPhilhealthNoAndNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Response {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckRecordIfExisting_PhilhealthNoCompletedEventHandler(object sender, CheckRecordIfExisting_PhilhealthNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRecordIfExisting_PhilhealthNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRecordIfExisting_PhilhealthNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        ///// <remarks/>
        //public int Result {
        //    get {
        //        this.RaiseExceptionIfNecessary();
        //        return ((int)(this.results[1]));
        //    }
        //}
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckRecordIfExisting_FirstMiddleLastCompletedEventHandler(object sender, CheckRecordIfExisting_FirstMiddleLastCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRecordIfExisting_FirstMiddleLastCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRecordIfExisting_FirstMiddleLastCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        ///// <remarks/>
        //public int Result {
        //    get {
        //        this.RaiseExceptionIfNecessary();
        //        return ((int)(this.results[1]));
        //    }
        //}
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591